using JSON
using Printf

const DATA_DIR = joinpath(@__DIR__, "vscode-unicode-data", "out")
const OUTPUT_FILE = joinpath(@__DIR__, "lua", "data.lua")


utf8bytes(cp::Integer) = Int.(collect(codeunits(string(Char(cp)))))
lua_array(arr::Array) = "{" * join(arr, ", ") * "}"

function ambiguous_data_to_table(json_string::String)
    data = JSON.parse(json_string)
    data = JSON.parse(data)

    unique_entries = Set()

    for (_, values) in data
        for i in 1:2:length(values)
            if i + 1 <= length(values)
				amb = values[i]
				alt = values[i+1]
				cp1 = utf8bytes(amb) |> lua_array
				cp2 = utf8bytes(alt) |> lua_array
				entry = "    { $cp1, $cp2, $amb, $alt }"
                push!(unique_entries, entry)
            else
                cp = values[i]
                entry = "    { $cp }"
                push!(unique_entries, entry)
            end
        end
    end

    sorted_entries = sort(collect(unique_entries))
    return "{\n" * join(sorted_entries, ",\n") * "\n}"
end

function invisible_data_to_table(json_string::String)
    data = JSON.parse(json_string)
    data = JSON.parse(data)

    unique_patterns = Set()

    for (_, values) in data
        for i in values
            code = utf8bytes(i)
			code = lua_array(code) 
			push!(unique_patterns, "{$code, $i}")
        end
    end

    sorted_patterns = sort(collect(unique_patterns))
    formatted_entries = [p for p in sorted_patterns]
    return "{ " * join(formatted_entries, ", ") * " }"
end

function main()
    println("Generating data.lua from JSON files...")

    try
        ambiguous_data = read(joinpath(DATA_DIR, "ambiguous.json"), String)
        invisible_data = read(joinpath(DATA_DIR, "invisibleCharacters.json"), String)

        lua_content = """
        -- This file is auto-generated by a Julia script. Do not edit manually!

        local M = {}

        M.ambiguous = $(ambiguous_data_to_table(ambiguous_data))

        M.invisible = $(invisible_data_to_table(invisible_data))

        return M
        """

        mkpath(dirname(OUTPUT_FILE))

        open(OUTPUT_FILE, "w") do f
            write(f, lua_content)
        end

        println(" Successfully created $(OUTPUT_FILE)")

    catch e
        @error "An error occurred during script execution:" e [cite:8]
    end
end

main()
